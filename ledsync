#!/usr/bin/env python3

import argparse
import asyncio
import signal
import sys
from openrgb import OpenRGBClient
from bleak import BleakClient

# Default ELK-BLEDOM LED Strip Bluetooth details
ELK_BLEDOM_MAC = "BE:67:00:1B:14:00"
CHAR_UUID = "0000fff3-0000-1000-8000-00805f9b34fb"

# Brightness conversion table (mapping 0-3 to 0-255)
BRIGHTNESS_MAP = {0: 0, 1: 85, 2: 170, 3: 255}

# Store last known keyboard status
last_state = None
running = True  # Flag for controlling loop

def parse_arguments():
    """Parse command-line arguments."""
    parser = argparse.ArgumentParser(description='Sync keyboard RGB and brightness with ELK-BLEDOM LED strip.')
    parser.add_argument('-s', '--server', type=str, required=True, help='OpenRGB server IP address')
    parser.add_argument('-p', '--port', type=int, default=6742, help='OpenRGB server port (default: 6742)')
    parser.add_argument('-m', '--mac', type=str, default=ELK_BLEDOM_MAC, help='ELK-BLEDOM MAC address')
    return parser.parse_args()

async def get_keyboard_state(client):
    """Retrieve the keyboard RGB color and brightness from OpenRGB."""
    try:
        keyboard_device = next((device for device in client.devices if "Keyboard" in device.name), None)

        if not keyboard_device:
            print("\n‚ö†Ô∏è Keyboard device not found!")
            return None

        keyboard_device.update()  # Refresh keyboard state

        color = keyboard_device.colors[0]  # Get current RGB color

        # Get brightness from the active mode
        active_mode_id = keyboard_device.active_mode
        brightness = keyboard_device.modes[active_mode_id].brightness

        # Map brightness (0-3) to (0-1.0) scale for RGB dimming
        brightness_scale = BRIGHTNESS_MAP.get(brightness, 255) / 255.0

        # Adjust RGB values based on brightness
        r = int(color.red * brightness_scale)
        g = int(color.green * brightness_scale)
        b = int(color.blue * brightness_scale)

        return (r, g, b, brightness)

    except Exception as e:
        print(f"\n‚ö†Ô∏è Error retrieving keyboard state: {e}")
        return None

async def set_led_state(r, g, b, brightness, mac_address):
    """Send color and brightness settings to the ELK-BLEDOM LED strip using RGB dimming."""
    try:
        async with BleakClient(mac_address) as client:
            if not client.is_connected:
                print("\n‚ö†Ô∏è Failed to connect to ELK-BLEDOM!")
                return

            # Print in the same line (overwrite previous)
            sys.stdout.write(f"\r‚úÖ Updating ELK-BLEDOM: RGB({r}, {g}, {b}), Brightness {brightness}  ")
            sys.stdout.flush()

            # Set RGB (brightness is handled via dimming)
            color_command = bytearray([0x7E, 0x00, 0x05, 0x03, r, g, b, 0x00, 0xEF])
            await client.write_gatt_char(CHAR_UUID, color_command, response=False)

    except Exception as e:
        print(f"\n‚ö†Ô∏è Error updating ELK-BLEDOM: {e}")

async def sync_state(server_ip, server_port, mac_address):
    """Continuously sync keyboard color & brightness with the LED strip, only updating on change."""
    global last_state, running

    try:
        client = OpenRGBClient(server_ip, port=server_port)  # Connect to OpenRGB server
        print(f"‚úÖ Connected to OpenRGB at {server_ip}:{server_port}")
    except Exception as e:
        print(f"\n‚ùå Failed to connect to OpenRGB server: {e}")
        return

    try:
        while running:
            state = await get_keyboard_state(client)

            if state and state != last_state:  # Only update if the state changed
                await set_led_state(*state, mac_address)
                last_state = state  # Update last known state

            await asyncio.sleep(0.05)  # Adjust refresh rate as needed
    except asyncio.CancelledError:
        print("\nüõë Script interrupted. Cleaning up...")
    finally:
        print("\nüîå Disconnecting from OpenRGB...")
        client.disconnect()

def signal_handler(sig, frame):
    """Handle exit signals to stop the script gracefully."""
    global running
    running = False
    print("\nüõë Received exit signal (Ctrl+C). Stopping gracefully...")

if __name__ == "__main__":
    args = parse_arguments()

    # Register the signal handler for graceful termination
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    # Run the sync loop
    try:
        asyncio.run(sync_state(args.server, args.port, args.mac))
    except KeyboardInterrupt:
        print("\nüõë Exiting due to Ctrl+C.")
    except Exception as e:
        print(f"\n‚ö†Ô∏è Unexpected error: {e}")
